/**
 * TodoService
 * An example grpc service
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import * as querystring from "querystring";
import * as url from "url";

import * as isomorphicFetch from "isomorphic-fetch";
import * as assign from "core-js/library/fn/object/assign";

interface Dictionary<T> { [index: string]: T; }
export interface FetchAPI { (url: string, init?: any): Promise<any>; }

const BASE_PATH = "http://localhost";

export interface FetchArgs {
    url: string;
    options: any; 
}

export class BaseAPI {
    basePath: string;
    fetch: FetchAPI;

    constructor(fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) {
        this.basePath = basePath;
        this.fetch = fetch;
    }
}

export interface ServicesEmpty {
}

export interface ServicesTodo {
    "id"?: number;
    "text"?: string;
    "done"?: boolean;
}

export interface ServicesTodos {
    "todos"?: Array<ServicesTodo>;
}



/**
 * TodoServiceApi - fetch parameter creator
 */
export const TodoServiceApiFetchParamCreactor = {
    /** 
     * @param id 
     */
    _delete(params: {  id: number; }): FetchArgs {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling _delete");
        }
        const baseUrl = `/v1/todo/{id}`
            .replace(`{${"id"}}`, `${ params.id }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "DELETE" };

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * @param body 
     */
    create(params: {  body: ServicesTodo; }): FetchArgs {
        // verify required parameter "body" is set
        if (params["body"] == null) {
            throw new Error("Missing required parameter body when calling create");
        }
        const baseUrl = `/v1/todo`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "POST" };

        let contentTypeHeader: Dictionary<string>;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["body"]) {
            fetchOptions.body = JSON.stringify(params["body"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * @param id 
     */
    get(params: {  id: number; }): FetchArgs {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling get");
        }
        const baseUrl = `/v1/todo/{id}`
            .replace(`{${"id"}}`, `${ params.id }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "GET" };

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     */
    list(): FetchArgs {
        const baseUrl = `/v1/todo`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "GET" };

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * @param id 
     * @param body 
     */
    update(params: {  id: number; body: ServicesTodo; }): FetchArgs {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling update");
        }
        // verify required parameter "body" is set
        if (params["body"] == null) {
            throw new Error("Missing required parameter body when calling update");
        }
        const baseUrl = `/v1/todo/{id}`
            .replace(`{${"id"}}`, `${ params.id }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "POST" };

        let contentTypeHeader: Dictionary<string>;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["body"]) {
            fetchOptions.body = JSON.stringify(params["body"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
}

/**
 * TodoServiceApi - functional programming interface
 */
export const TodoServiceApiFp = {
    /** 
     * @param id 
     */
    _delete(params: { id: number;  }): (fetch: FetchAPI, basePath?: string) => Promise<ServicesEmpty> {
        const fetchArgs = TodoServiceApiFetchParamCreactor._delete(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * @param body 
     */
    create(params: { body: ServicesTodo;  }): (fetch: FetchAPI, basePath?: string) => Promise<ServicesTodo> {
        const fetchArgs = TodoServiceApiFetchParamCreactor.create(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * @param id 
     */
    get(params: { id: number;  }): (fetch: FetchAPI, basePath?: string) => Promise<ServicesTodo> {
        const fetchArgs = TodoServiceApiFetchParamCreactor.get(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     */
    list(): (fetch: FetchAPI, basePath?: string) => Promise<ServicesTodos> {
        const fetchArgs = TodoServiceApiFetchParamCreactor.list();
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * @param id 
     * @param body 
     */
    update(params: { id: number; body: ServicesTodo;  }): (fetch: FetchAPI, basePath?: string) => Promise<ServicesTodo> {
        const fetchArgs = TodoServiceApiFetchParamCreactor.update(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * TodoServiceApi - object-oriented interface
 */
export class TodoServiceApi extends BaseAPI {
    /** 
     * @param id 
     */
    _delete(params: {  id: number; }) {
        return TodoServiceApiFp._delete(params)(this.fetch, this.basePath);
    }
    /** 
     * @param body 
     */
    create(params: {  body: ServicesTodo; }) {
        return TodoServiceApiFp.create(params)(this.fetch, this.basePath);
    }
    /** 
     * @param id 
     */
    get(params: {  id: number; }) {
        return TodoServiceApiFp.get(params)(this.fetch, this.basePath);
    }
    /** 
     */
    list() {
        return TodoServiceApiFp.list()(this.fetch, this.basePath);
    }
    /** 
     * @param id 
     * @param body 
     */
    update(params: {  id: number; body: ServicesTodo; }) {
        return TodoServiceApiFp.update(params)(this.fetch, this.basePath);
    }
};

/**
 * TodoServiceApi - factory interface
 */
export const TodoServiceApiFactory = function (fetch?: FetchAPI, basePath?: string) {
    return {
        /** 
         * @param id 
         */
        _delete(params: {  id: number; }) {
            return TodoServiceApiFp._delete(params)(fetch, basePath);
        },
        /** 
         * @param body 
         */
        create(params: {  body: ServicesTodo; }) {
            return TodoServiceApiFp.create(params)(fetch, basePath);
        },
        /** 
         * @param id 
         */
        get(params: {  id: number; }) {
            return TodoServiceApiFp.get(params)(fetch, basePath);
        },
        /** 
         */
        list() {
            return TodoServiceApiFp.list()(fetch, basePath);
        },
        /** 
         * @param id 
         * @param body 
         */
        update(params: {  id: number; body: ServicesTodo; }) {
            return TodoServiceApiFp.update(params)(fetch, basePath);
        },
    }
};

